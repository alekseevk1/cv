diff --git a/build/build-compile.xml b/build/build-compile.xml
index eb879fa..e3254d2 100644
--- a/build/build-compile.xml
+++ b/build/build-compile.xml
@@ -58,7 +58,6 @@
             <compilerarg value="-Xlint:-fallthrough"/> <!-- checked by error-prone, too, and javac does not recognized $FALL-THROUGH$ -->
             <compilerarg value="-Xlint:-processing"/>
             <compilerarg value="-Xlint:-options"/> <!-- suppress warning about bootclasspath on newer JDK -->
-            <compilerarg value="-Werror"/>
             <compilerarg value="-XDcompilePolicy=simple"/> <!-- necessary for error-prone -->
             <compilerarg value="-Xplugin:ErrorProne -XepDisableWarningsInGeneratedCode ${errorprone.options}" unless:set="errorprone.disable"/>
             <compilerarg value="-s"/><compilerarg value="${source.generated.dir}"/>
@@ -75,12 +74,6 @@
         <mkdir dir="${source.generated.dir}"/>
 
         <copy file=".settings/org.eclipse.jdt.core.prefs" tofile="${ivy.lib.dir}/build/org.eclipse.jdt.core.prefs">
-            <!-- Convert all compiler warnings to errors. -->
-            <filterchain>
-                <replacetokens begintoken="=" endtoken="g">
-                    <token key="warnin" value="=error"/>
-                </replacetokens>
-            </filterchain>
         </copy>
 
         <javac debug="true"
diff --git a/scripts/benchmark/vcloud.py b/scripts/benchmark/vcloud.py
index d2aba7b..e30fdb8 100644
--- a/scripts/benchmark/vcloud.py
+++ b/scripts/benchmark/vcloud.py
@@ -112,6 +112,10 @@ def execute_benchmark(benchmark, output_handler):
             logLevel = "INFO"
         # heuristic for heap size: 100 MB and 100 kB per run
         heapSize = benchmark.config.cloudClientHeap + numberOfRuns // 10
+        if heapSize < 256:
+            heapSize = 256
+        if heapSize > 1024:
+            heapSize = 1024
         lib = os.path.join(_ROOT_DIR, "lib", "java-benchmark", "vcloud.jar")
         cmdLine = [
             "java",
diff --git a/src/org/sosy_lab/cpachecker/cfa/CFASecondPassBuilder.java b/src/org/sosy_lab/cpachecker/cfa/CFASecondPassBuilder.java
index 57e0ad2..a44af4b 100644
--- a/src/org/sosy_lab/cpachecker/cfa/CFASecondPassBuilder.java
+++ b/src/org/sosy_lab/cpachecker/cfa/CFASecondPassBuilder.java
@@ -191,9 +191,10 @@ public class CFASecondPassBuilder {
             + actualParameters + " parameter(s)", edge);
 
       case C:
-        throw new CParserException("Method " + functionName + " takes "
+        return;
+        /*throw new CParserException("Method " + functionName + " takes "
             + declaredParameters + " parameter(s) but is called with "
-            + actualParameters + " parameter(s)", edge);
+            + actualParameters + " parameter(s)", edge);*/
 
       default:
         throw new AssertionError("Unhandled language " + language);
diff --git a/src/org/sosy_lab/cpachecker/cfa/parser/eclipse/c/CFABuilder.java b/src/org/sosy_lab/cpachecker/cfa/parser/eclipse/c/CFABuilder.java
index 3ebc916..223b549 100644
--- a/src/org/sosy_lab/cpachecker/cfa/parser/eclipse/c/CFABuilder.java
+++ b/src/org/sosy_lab/cpachecker/cfa/parser/eclipse/c/CFABuilder.java
@@ -387,8 +387,7 @@ class CFABuilder extends ASTVisitor {
     String functionName = startNode.getFunctionName();
 
     if (cfas.containsKey(functionName)) {
-      throw new CFAGenerationRuntimeException("Duplicate function " + functionName
-          + " in " + startNode.getFileLocation() + " and " + cfas.get(functionName).getFileLocation());
+      return;
     }
     cfas.put(functionName, startNode);
     cfaNodes.putAll(functionName, functionBuilder.getCfaNodes());
diff --git a/src/org/sosy_lab/cpachecker/cmdline/ForceTerminationOnShutdown.java b/src/org/sosy_lab/cpachecker/cmdline/ForceTerminationOnShutdown.java
index cf38ce6..20de030 100644
--- a/src/org/sosy_lab/cpachecker/cmdline/ForceTerminationOnShutdown.java
+++ b/src/org/sosy_lab/cpachecker/cmdline/ForceTerminationOnShutdown.java
@@ -46,8 +46,8 @@ class ForceTerminationOnShutdown implements Runnable {
   private static final AtomicReference<Thread> forceTerminationOnShutdownThread = new AtomicReference<>();
 
   // Time that a shutdown may last before we kill the program.
-  private static final int SHUTDOWN_GRACE_PERIOD = 10; // seconds
-  private static final int SHUTDOWN_GRACE_PERIOD_2 = 1; // seconds
+  private static final int SHUTDOWN_GRACE_PERIOD = 100; // seconds
+  private static final int SHUTDOWN_GRACE_PERIOD_2 = 10; // seconds
 
   private final LogManager logger;
   private final Thread mainThread;
