Верификационное облако предназначено для распараллеливания решения задач на нескольких машинах.
Машина, на которой развёртывается облако, будет называться сервером, а машины, на которых решаются задачи – узлами.
Примечание: одна и та же машина одновременно может быть как сервером, так и узлом.

1. Настройка сервера.

1.1. Предварительная настройка.

1.1.1. Требования:
 - java (версия 1.8 и выше);
 - tomcat (версия 8 и выше);
 - git (версия 2.7 и выше);
 - svn;
 - git-svn;
 - openssh-server.
Сервер рекомендуется устанавливать на Ubuntu 16.04.
Проверить наличие зависимостей на Ubuntu 16.04 можно командой:
sudo apt install openjdk-8-jdk openjdk-8-doc openjdk-8-source ant ant-optional ssh openssh-server git git-svn subversion tomcat8

1.1.2. Изменение параметров запуска tomcat.
1.1.2.1. В файле /etc/default/tomcat8 необходимо:
 - раскомментировать параметр JAVA_HOME и прописать путь до java-1.8;
 - увеличить значение -Xmx128m в параметре JAVA_OPTS до -Xmx512m.
1.1.2.2. Настроить права:
sudo chown --recursive tomcat8:tomcat8 /usr/share/tomcat8/
sudo chown --recursive tomcat8:tomcat8 /var/lib/tomcat8/
1.1.2.3. Перезапустить tomcat командой:
sudo service tomcat8 restart

1.1.3. Настройка контрольных групп (аналогично шагу 1.2 из документации docs/readme.txt).

1.1.4. Настройка свопа (аналогично шагу 1.3 из документации docs/readme.txt).

1.1.5. Настройка соединения сервера с узлами.

1.1.5.1. На сервере сгенерировать ssh ключ:
ssh-keygen
Далее указать путь к файлу с ключом (например, /home/<user>/.ssh/cloud).
1.1.5.2. В файл ~/.ssh/config добавить для каждого узла (если файла нет, то его следует создать):
Host <имя узла - произвольное>
Hostname <адрес узла в сети (<node_i> из пункта 2.1.7)>
User <пользователь, под которым сервер будет обращаться к узлу (<user_i> из пункта 2.1.7)>
PubKeyAuthentication yes
IdentityFile <путь к ssh ключу (например, /home/<user>/.ssh/cloud)>
1.1.5.3. Для каждого узла выполнить (при выполнении данного шага пункт 2.1.5 можно пропустить):
ssh-copy-id -i /home/<user>/.ssh/cloud <имя узла>
При необходимости ввести пароль.

1.2. Установка.

1.2.1. Выкачать репозитории.
1.2.1.1. Верификационное облако (ветка cv):
git clone git@gitlab.com:mutilin/vcloud.git verifiercloud
cd verifiercloud
git checkout cv
1.2.1.2. CPAchecker:
mkdir -p git/cpachecker
git clone -n -o origin https://svn.sosy-lab.org/git/software/cpachecker.git/ git/cpachecker
cd git/cpachecker
git svn init --prefix=origin/ -s https://svn.sosy-lab.org/software/cpachecker
git checkout -t origin/trunk
git svn fetch
cd ../..

1.2.2. Сборка:
ant clean ; ant && ant jar-big war webclient-jar

1.2.3. Конфигурация.
1.2.3.1. Запустить сервер для инициализации конфигурационных файлов и завершить его через несколько секунд:
java -jar vcloud.jar master
1.2.3.2. В файле ~/.verifiercloud/master/WorkerInformation требуется добавить имена всех узлов по одному на каждой строке.
1.2.3.3. В файле ~/.verifiercloud/master/Config требуется изменить:
zip-storage-location = <произвольная директория, в которую будут помещаться промежуточные результаты>
max-file-size = 1000 MB
1.2.3.4. Развернуть сервер:
sudo cp vcloud.war /var/lib/tomcat8/webapps/
1.2.3.5. В файле /usr/share/tomcat8/.verifiercloud/vcloud/client/Config изменить:
master = <имя сервера>
1.2.3.6. В файле /usr/share/tomcat8/.verifiercloud/vcloud/client/WebClient_Config изменить:
url = http://<имя сервера>:<порт>/vcloud/webclient
gitRepositoryAutoFetch = true
gitBenchmarksRepositories =
gitBenchmarksUpdateTimer = 60
command = scripts/cpa.sh
allowedRevisionsAndBranches = *:14002-HEAD
defaultMaxPriority = URGENT
defaultMaxLimitations = (500min,64 GB,8)
try-less-memory = true
maxRunsPerRunCollection = 100000
maxGroupSubmissionTimeSpan = 02min
buildCommandTimeLimitation = 10min
buildCommandMemoryRequirementLimitation = 2 GB
buildCommandSchedulingPriority = URGENT
1.2.3.7. Добавить ссылку на репозиторий:
sudo ln -s ~/verifiercloud/git /var/lib/tomcat8/
sudo chown --recursive tomcat8:tomcat8 /var/lib/tomcat8/git
1.2.3.8. Добавить ссылки на собранную версию web-сервера (выполняется из директории инструментария для ведения непрерывной верификации):
./create_cloud_links.sh <verifiercloud_dir>
Примечание: данную команду надо выполнять каждый раз после переустановки верификатора CPAchecker.

1.3. Управление облаком.

1.3.1. Запуск сервера (выполняется из директории verifiercloud)
1.3.1.1. Запустить основной процесс:
java -jar vcloud.jar master
Если конфигурация ошибочна, то в логе появятся сообщения об ошибках.
Примечание: необходимо учитывать, что облако может использовать всю оперативную память и все ядра процессора на узлах. Имеется возможность конфигурирования каждого узла (см. п. 2.2).
1.3.1.2. Перезагрузить tomcat:
sudo service tomcat8 restart
После этого web-сервер должен быть доступен по адресу:
<имя сервера>:8080/vcloud/webclient/master/info
Если конфигурация корректна, то в таблице Connected Hosts появятся все узлы с состоянием HEALTHY.

1.3.2. Остановка сервера (рекомендуется выполнять время от времени для очистки временных директорий):
1.3.2.1. Остановить основной процесс, созданный на предыдущем шаге.
1.3.2.2. Остановить tomcat:
sudo service tomcat8 stop
1.3.2.3. Очистить рабочую директорию и логи:
rm -rf /tmp/vcloud-*/ /tmp/tomcat8-tomcat8-tmp/ <zip-storage-location>
sudo rm -rf /var/lib/tomcat8/logs/* /var/lib/tomcat8/logfiles/*

1.3.3. Верификация.
Для верификации с использованием облака необходимо запустить сервер и изменить конфигурацию задания следующим образом:
- Launcher: scheduler = cloud;
- cloud: master = <имя сервера>;
- cloud: priority = <приоритет задания (IDLE < LOW < HIGH < URGENT)> - имеет смысл указывать, если решается одновременно несколько заданий.
После этого верификация запускается стандартной командой:
scripts/launcher.py --config <файлы с конфигурацией>
При этом задания будут решаться параллельно на всех узлах.

2. Настройка узла.

2.1. Предварительная настройка (выполняется перед включением узла в облако, т.е. перед шагов 1.1.5.2).

2.1.1. Требования:
 - java 1.8;
 - openssh-server;
 - python 3.4 или выше (при этом команда python должна также выполняться).

2.1.2. Настройка контрольных групп (аналогично шагу 1.2 из документации docs/readme.txt).

2.1.3 Настройка свопа (аналогично шагу 1.3 из документации docs/readme.txt).

2.1.4. Создать пользователя для решения задач из облака.
Данный шаг при необходимости можно пропустить (тогда задачи будут решаться от имени текущего пользователя).
Дальнейшие действия необходимо выполнять от имени данного пользователя.

2.1.5. Установить ssh-ключ.
Добавить запись в файл /home/<имя пользователя>/.ssh/authorized_keys запись, соответствующую публичному ключу администратора сервера.

2.1.6. Установить начальную конфигурацию.
mkdir -p /home/<имя пользователя>/.verifiercloud/worker/
cp docs/aux/cloud_config /home/<имя пользователя>/.verifiercloud/worker/Config
Изменить следующие параметры файла:
master = <имя сервера>
ignored-users = <добавить имя пользователя в список>

2.1.7. Сообщить администратору (на сервер) следующие данные по узлу:
- адрес узла в сети <node_i>;
- имя пользователя <user_i>.

2.2. Дополнительные настройки (выполняется после включения узла в облако).

2.2.1. Корректировка используемой облаком оперативной памяти (можно выполнять во время работы облака на узле).
Для задания части оперативной памяти, которая будет доступна облаку, необходимо записать число (от 0.0 до 1.0) в файл /tmp/cloud_memory_limit.
Например, выделить всю оперативную память:
echo 1.0 > /tmp/cloud_memory_limit
Выделить половину памяти:
echo 0.5 > /tmp/cloud_memory_limit
Перестать принимать задачи на данном узле:
echo 0.0 > /tmp/cloud_memory_limit
По умолчанию (если файла нет или число в нем задано некорректно), будет использоваться вся оперативная память узла.

2.2.2. Отключение облака при работе определенных пользователей.
По умолчанию (опция stop-worker-on-userlogin в конфигурационном файле ~/.verifiercloud/worker/Config) облако перестает использовать узел, если существует хотя бы один процесс от пользователя, который не внесен в список ignored-users.
Для того чтобы облако продолжало функционировать при работе определенных пользователей, их имена необходимо добавить в список ignored-users.
Для того чтобы прекращать работу облака при работе определенных программ от любых пользователей, их необходимо добавить в список not-ignored-programs.


Более подробно про установку и использование инструмента можно почитать в его документации:
verifiercloud/README.md
verifiercloud/doc/DevSetupManual.README
